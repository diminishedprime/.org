+ [[./index.org][Main Index]]

* Programming Ideas
1) Text completion using a custom dictionary.
2) Foobar3k, clojure flac player that's customizable like emacs
3) annotate properties on your code, perhaps checked as you are
   programming to give you that mega degrees of certainty.
   + Ability to limit the domain that you care about.
   + Arities?
     + How to accept multiple arities?
   + let a property be a keyword or a fn with jack-ins for the generators?
   + How do we make this something that's actually useful?
     + I.E how are properties composable.
   + hacked out idea?
   #+BEGIN_SRC clojure
     (defn
       ^{:doc "add1 takes a number and outputs that number plus 1"
         :spec {:domain [:R]
                :properties [{:property :output-number
                              :domain :N
                              :arity [:integer :integerB]
                              }]}}
       add-nums [x y]
       (+ x y))

     (defn check-spec [fn-var]
       (let [my-meta (meta fn-var)
             spec (:spec my-meta)
             properties (:properties spec)]
         ))

     (defn resolve-gen [gen-kw]
       (condp = gen-kw
         :integer 'gen-integer
         :integerB 'ayy
         ))

     (defn gen-for-arity [arity-vec]
       (map resolve-gen arity-vec))
     (gen-for-arity [:integer :integerB])

     (require '[clojure.test.check :as tc])
     (require '[clojure.test.check.generators :as gen])

     (defn resolve-test [kw]
       (condp = kw
         :output-number 'ayy
         ))

     ;;test that output is greater than input
     ;; input

     (check-spec
      #'add-nums)

   #+END_SRC
4) Codenames Clojure App
   #+BEGIN_SRC clojure
   (ns mjh.cn.core)

   (defn gen-board []
       (let [board-size 25
             assassian-count 1
             team-1-operative-count 9
             team-2-operative-count 8
             bystander-count (- board-size
                                assassian-count team-1-operative-count team-2-operative-count)
             board-vec (shuffle (take board-size (iterate inc 0)))
             assassians (subvec board-vec 0 assassian-count)

             team-1-codenames (subvec board-vec
                                       assassian-count
                                       (+ assassian-count team-1-operative-count))
             team-2-codenames (subvec board-vec
                                       (+ assassian-count team-1-operative-count)
                                       (+ assassian-count team-1-operative-count team-2-operative-count))
             bystanders-codenames (subvec board-vec
                                          (+ assassian-count team-1-operative-count team-2-operative-count)
                                          (+ assassian-count team-1-operative-count team-2-operative-count bystander-count))]
         {:team-1-codenames team-1-codenames
          :team-2-codenames team-2-codenames
          :assassians assassians
          :bystanders bystanders-codenames}))

     (def temp-board  (gen-board))
     temp-board
     temp-words

     (defn assoc-words-with-board [board words]
       (letfn [(assoc-by-kw [kw]
                 (zipmap (kw board) (map (partial nth words) (kw board)))
                 )]
         {:team-1-codenames (assoc-by-kw :team-1-codenames)
          :team-2-codenames (assoc-by-kw :team-2-codenames)
          :assassians (assoc-by-kw :assassians)
          :bystanders (assoc-by-kw :bystanders)}))







     (assoc-words-with-board temp-board temp-words)
     (def temp-words (with-open [rdr (clojure.java.io/reader "/Users/mjhamrick/Desktop/nounlist.txt")]
                       (take 25 (shuffle (line-seq rdr)))))
   #+END_SRC
5) Datomic based YNAB
   #+BEGIN_SRC clojure
     ;; account.name string
     ;; account.type [on-budget | off-budget]
     ;; account.transaction-groups ref

     ;; transaction-group.transactions ref
     ;; transaction-group.date instant

     ;; transaction.payee    ref
     ;; transaction.amount   bigdec
     ;; transaction.category ref

     ;; payee.name string


   #+END_SRC
6) Guitar Utilities
   #+BEGIN_SRC clojure
     (require '[clojure.string :as str])

     (def base-fret-board {:e []
                           :b []
                           :g []
                           :d []
                           :a []
                           :E []})

     (defn fret->string
       [pressed?]
       (if pressed?
         "|-O-"
         "|---"))

     (defn guitar-string->string [length depressed-strings]
       (str (apply str (mapcat #(fret->string (some (set depressed-strings) [%]))
                               (range length))) "|"))

     (guitar-string->string 3 [1])

     (defn add-dots [length string-seq]
       (concat string-seq
               [(str/trimr (str "  "
                                (apply str (map (fn [i]
                                                  (if (#{3 5 7 12} i)
                                                    (str "  * ")
                                                    (str "    "))) (range length)))))]))

     (defn add-string-numbers [length string-seq]
       (cons (str/trimr (str "  "
                             (apply str (map (fn [i]
                                               (str (format "%3d" i) " ")) (range length)))))
             string-seq))

     (defn fret-seq->stacked-string [fret-seq]
       (apply str (interpose \newline fret-seq)))

     (defn fret-board->string
       ([fret-board]
        (let [depressed-strings? (filter seq (vals fret-board))
              length (inc (if (seq depressed-strings?)
                            (apply max
                                   (map (partial apply max)
                                        depressed-strings?))
                            0))]
          (fret-board->string fret-board length)))
       ([fret-board base-length]
        (fret-seq->stacked-string
         (add-dots
          base-length
          (add-string-numbers
           base-length
           (map (fn [[k v]]
                  (str k (guitar-string->string base-length v))) fret-board))))))

     (fret-board->string base-fret-board)

     (fret-board->string {:e [3]
                          :b [0]
                          :g [0]
                          :d [0]
                          :a [2]
                          :E [3]})

     (def natural-notes {9  :a
                         :a  9
                         11 :b
                         :b 11
                         0  :c
                         :c  0
                         2  :d
                         :d  2
                         4  :e
                         :e  4
                         5  :f
                         :f  5
                         7  :g
                         :g  7})


     (defn note-from-num [my-num]
       (if-let [natural-note (get natural-notes (mod my-num 12))]
         [natural-note]
         [(get natural-notes (mod (dec my-num) 12)) :sharp]))


     (defn note-from-string [string-base fret]
       (let [string-base (keyword (subs (.toLowerCase (str string-base)) 1))]
         (if-let [thing (get natural-notes string-base)]
           (note-from-num (+ thing fret)))))

     (def natural-sign "♮")
     (def sharp-sign "♯")
     (def flat-sign "♭")

     (def pretty-sign-map {:natural natural-sign
                           natural-sign :natural

                           :sharp sharp-sign
                           sharp-sign :sharp

                           :flat flat-sign
                           flat-sign :flat})

     (defn pretty-up-letter [letter-kw]
       (subs (.toUpperCase (str letter-kw)) 1))

     (defn pretty-up-note [note]
       (if (= 2 (count note))
         (str (pretty-up-letter (first note)) (get pretty-sign-map (second note)))
         (str (pretty-up-letter (first note)))))


     (defn stack-string-seq [string-seq]
       (apply str (interpose "\n" string-seq)))

     (defn notes-for-fret-board [fret-board]
       (let [fret-board (into {} (filter (fn [[k v]]
                                           (seq v)) fret-board))]
         (stack-string-seq
          (map (fn [[k v]]
                 (pretty-up-note
                  (note-from-string k (first v)))) fret-board))))

     (notes-for-fret-board {:e [3]
                            :b []
                            :g [0]
                            :d [0]
                            :a [2]
                            :E [3]})

     (defn pad-stacked-string [stacked-string pad-string]
       (stack-string-seq
        (map (fn [my-str]
               (str pad-string my-str)) (.split stacked-string "\n"))))

     (pad-stacked-string (notes-for-fret-board {:e [3]
                                                :b []
                                                :g [0]
                                                :d [0]
                                                :a [2]
                                                :E [3]}) "     Note: ")

     (defn pretty-print-fretted-chord
       ([fret-board]
        (str (fret-board->string fret-board)
             "\n\n"
             (pad-stacked-string (notes-for-fret-board fret-board)
                                 "      ")))
       ([fret-board min-length]
        (str (fret-board->string fret-board min-length)
             "\n\n"
             (pad-stacked-string (notes-for-fret-board fret-board)
                                 "      "))))

     (pretty-print-fretted-chord {:e [2]
                                  :b [3]
                                  :g [2]
                                  :d [0]
                                  :a []
                                  :E []})

     (pretty-print-fretted-chord {:e []
                                  :b [10]
                                  :g [11]>
                                  :d [11]
                                  :a [0]
                                  :E []})

     (pretty-print-fretted-chord {:e []
                                  :b [9]
                                  :g [9]
                                  :d [9]
                                  :a [0]
                                  :E []})

     (pretty-print-fretted-chord {:e []
                                  :b [5]
                                  :g [5]
                                  :d [4]
                                  :a []
                                  :E [3]})

     (pretty-print-fretted-chord {:e []
                                  :b [3]
                                  :g [4]
                                  :d [5]
                                  :a []
                                  :E []})

     (pretty-print-fretted-chord {:e [5]
                                  :b [3]
                                  :g [4]
                                  :d [4]
                                  :a []
                                  :E []})

     (let [random-string (rand-nth [:e :b :g :d :a])
           random-fret [(rand-int 5)]
           random-note {random-string random-fret}]
       (str (fret-board->string (merge base-fret-board
                                       random-note)
                                10)
            "\n\n      "
            (pretty-up-note
             (note-from-string random-string (first random-fret)))))xo
   #+END_SRC
7) What can I take?
   #+BEGIN_SRC clojure
     (ns temp
       (:require [clojure.core.logic :as l]
                 [clojure.core.logic.pldb :as pldb]))

     (pldb/db-rel course-info number name)
     (pldb/db-rel course->grouping course-id grouping-id)
     (pldb/db-rel grouping grouping-id description)
     (pldb/db-rel course->pre-req course pre-req-course)

     (def facts
       (pldb/db

        [grouping 0 "Architecture, Compilers, Parallel Computing"]
        [course->grouping 426 0] [course->grouping 431 0] [course->grouping 433 0]
        [course->grouping 435 0] [course->grouping 462 0] [course->grouping 483 0]
        [course->grouping 484 0] [course->grouping 526 0] [course->grouping 533 0]
        [course->grouping 536 0]

        [grouping 1 "Artificial Intelligence"]
        [course->grouping 440 1] [course->grouping 443 1] [course->grouping 445 1]
        [course->grouping 446 1] [course->grouping 447 1] [course->grouping 543 1]
        [course->grouping 544 1] [course->grouping 546 1] [course->grouping 548 1]

        [grouping 2 "Database, Information Systems, Bioinformatics"]
        [course->grouping 410 2] [course->grouping 411 2] [course->grouping 412 2]
        [course->grouping 466 2] [course->grouping 511 2] [course->grouping 512 2]

        [grouping 3 "Formal Methods, Programming Languages, Software Engineering"]
        [course->grouping 421 3] [course->grouping 422 3] [course->grouping 427 3]
        [course->grouping 428 3] [course->grouping 476 3] [course->grouping 477 3]
        [course->grouping 522 3] [course->grouping 524 3] [course->grouping 527 3]
        [course->grouping 528 3] [course->grouping 576 3]

        [grouping 4 "Graphics/HCI"]
        [course->grouping 417 4] [course->grouping 418 4] [course->grouping 419 4]
        [course->grouping 445 4] [course->grouping 465 4] [course->grouping 467 4]
        [course->grouping 519 4] [course->grouping 565 4]

        [grouping 5 "Systems and Networking (includes real-time systems & security)"]
        [course->grouping 414 5] [course->grouping 423 5] [course->grouping 424 5]
        [course->grouping 425 5] [course->grouping 438 5] [course->grouping 439 5]
        [course->grouping 461 5] [course->grouping 463 5] [course->grouping 523 5]
        [course->grouping 525 5] [course->grouping 538 5] [course->grouping 541 5]
        [course->grouping 545 5] [course->grouping 563 5]

        [grouping 6 "Scientific Computing"]
        [course->grouping 450 6] [course->grouping 457 6] [course->grouping 482 6]
        [course->grouping 554 6] [course->grouping 555 6] [course->grouping 556 6]
        [course->grouping 558 6]

        [grouping 7 "Theoretical Computer Science"]
        [course->grouping 473 7] [course->grouping 475 7] [course->grouping 571 7]
        [course->grouping 573 7] [course->grouping 574 7] [course->grouping 579 7]
        [course->grouping 583 7]

        [course-info 523 "Advanced Operating Systems"]
        [course->pre-req 523 423]
        [course->pre-req 523 425]
        [course->pre-req 523 433]

        [course->pre-req 533 433]

        [course-info 100 "Freshman Orientation"]
        [course->pre-req 100 "NONE"]
        [course-info 101 "Intro Computing: Engrg & Sci"]
        [course->pre-req 101 "NONE"]
        [course-info 102 "Little Bits to Big Ideas"]
        [course->pre-req 102 "NONE"]
        [course-info 105 "Intro Computing: Non-Tech"]
        [course->pre-req 105 "NONE"]
        [course-info 125 "Intro to Computer Science"]
        [course->pre-req 125 "NONE"]
        [course-info 126 "Software Design Studio"]
        [course->pre-req 126 "NONE"]
        [course-info 173 "Discrete Structures"]
        [course->pre-req 173 "NONE"]
        [course-info 196 "Freshman Honors"]
        [course->pre-req 196 "NONE"]
        [course-info 199 "Undergraduate Open Seminar"]
        [course->pre-req 199 "NONE"]
        [course-info 199 "G1H  Undergraduate Open Seminar"]
        [course->pre-req 199 "NONE"]
        [course-info 199 "K12  Undergraduate Open Seminar"]
        [course->pre-req 199 "NONE"]
        [course-info 199 "LA1  Undergraduate Open Seminar"]
        [course->pre-req 199 "NONE"]
        [course-info 210 "Ethical & Professional Issues"]
        [course->pre-req 210 "NONE"]
        [course-info 225 "Data Structures"]
        [course->pre-req 225 "NONE"]
        [course-info 233 "Computer Architecture"]
        [course->pre-req 233 "NONE"]
        [course-info 241 "System Programming"]
        [course->pre-req 241 "NONE"]
        [course-info 242 "Programming Studio"]
        [course->pre-req 242 "NONE"]
        [course-info 296 "Honors Course"]
        [course->pre-req 296 "NONE"]
        [course-info 357 "Numerical Methods I"]
        [course->pre-req 357 "NONE"]
        [course-info 361 "Prob & Stat for Computer Sci"]
        [course->pre-req 361 "NONE"]
        [course-info 374 "Intro to Algs & Models of Comp"]
        [course->pre-req 374 "NONE"]
        [course-info 397 "Individual Study"]
        [course->pre-req 397 "NONE"]
        [course-info 398 "Special Topics"]
        [course->pre-req 398 "NONE"]
        [course-info 410 "Text Information Systems"]
        [course->pre-req 410 "NONE"]
        [course-info 411 "Database Systems"]
        [course->pre-req 411 "NONE"]
        [course-info 412 "Introduction to Data Mining"]
        [course->pre-req 412 "NONE"]
        [course-info 413 "Intro to Combinatorics"]
        [course->pre-req 413 "NONE"]
        [course-info 414 "Multimedia Systems"]
        [course->pre-req 414 "NONE"]
        [course-info 418 "Interactive Computer Graphics"]
        [course->pre-req 418 "NONE"]
        [course-info 419 "Production Computer Graphics"]
        [course->pre-req 419 "NONE"]
        [course-info 420 "Parallel Progrmg: Sci & Engrg"]
        [course->pre-req 420 "NONE"]
        [course-info 421 "Progrmg Languages & Compilers"]
        [course->pre-req 421 "NONE"]
        [course-info 422 "Programming Language Design"]
        [course->pre-req 422 "NONE"]
        [course-info 423 "Operating Systems Design"]
        [course->pre-req 423 "NONE"]
        [course-info 424 "Real-Time Systems"]
        [course->pre-req 424 "NONE"]
        [course-info 425 "Distributed Systems"]
        [course->pre-req 425 "NONE"]
        [course-info 426 "Compiler Construction"]
        [course->pre-req 426 421]
        [course-info 427 "Software Engineering I"]
        [course->pre-req 427 "NONE"]
        [course-info 428 "Software Engineering II"]
        [course->pre-req 428 "NONE"]
        [course-info 429 "Software Engineering II, ACP"]
        [course->pre-req 429 "NONE"]
        [course-info 431 "Embedded Systems"]
        [course->pre-req 431 "NONE"]
        [course-info 433 "Computer System Organization"]
        [course->pre-req 433 "NONE"]
        [course-info 436 "Computer Networking Laboratory"]
        [course->pre-req 436 "NONE"]
        [course-info 438 "Communication Networks"]
        [course->pre-req 438 "NONE"]
        [course-info 439 "Wireless Networks"]
        [course->pre-req 439 "NONE"]
        [course-info 440 "Artificial Intelligence"]
        [course->pre-req 440 "NONE"]
        [course-info 446 "Machine Learning"]
        [course->pre-req 446 "NONE"]
        [course-info 447 "Natural Language Processing"]
        [course->pre-req 447 "NONE"]
        [course-info 450 "Numerical Analysis"]
        [course->pre-req 450 "NONE"]
        [course-info 457 "Numerical Methods II"]
        [course->pre-req 457 "NONE"]
        [course-info 460 "Security Laboratory"]
        [course->pre-req 460 "NONE"]
        [course-info 461 "Computer Security I"]
        [course->pre-req 461 "NONE"]
        [course-info 463 "Computer Security II"]
        [course->pre-req 463 "NONE"]
        [course-info 465 "User Interface Design"]
        [course->pre-req 465 "NONE"]
        [course-info 466 "Introduction to Bioinformatics"]
        [course->pre-req 466 "NONE"]
        [course-info 467 "Social Visualization"]
        [course->pre-req 467 "NONE"]
        [course-info 473 "Fundamental Algorithms"]
        [course->pre-req 473 "NONE"]
        [course-info 475 "Formal Models of Computation"]
        [course->pre-req 475 "NONE"]
        [course-info 476 "Program Verification"]
        [course->pre-req 476 "NONE"]
        [course-info 477 "Formal Software Devel Methods"]
        [course->pre-req 477 "NONE"]
        [course-info 481 "Stochastic Processes & Applic"]
        [course->pre-req 481 "NONE"]
        [course-info 482 "Simulation"]
        [course->pre-req 482 "NONE"]
        [course-info 483 "Applied Parallel Programming"]
        [course->pre-req 483 "NONE"]
        [course-info 484 "Parallel Programming"]
        [course->pre-req 484 "NONE"]
        [course-info 491 "Seminar"]
        [course->pre-req 491 "NONE"]
        [course-info 492 "Senior Project I"]
        [course->pre-req 492 "NONE"]
        [course-info 493 "Senior Project II, ACP"]
        [course->pre-req 493 "NONE"]
        [course-info 494 "Senior Project II"]
        [course->pre-req 494 "NONE"]
        [course-info 498 "Special Topics"]
        [course->pre-req 498 "NONE"]
        [course-info 498 "AB2  Special Topics"]
        [course->pre-req 498 "NONE"]
        [course-info 499 "Senior Thesis"]
        [course->pre-req 499 "NONE"]
        [course-info 511 "Advanced Data Management"]
        [course->pre-req 511 "NONE"]
        [course-info 512 "Data Mining Principles"]
        [course->pre-req 512 "NONE"]
        [course-info 519 "Scientific Visualization"]
        [course->pre-req 519 "NONE"]
        [course-info 522 "Programming Language Semantics"]
        [course->pre-req 522 "NONE"]
        [course-info 523 "Advanced Operating Systems"]
        [course-info 524 "Concurrent Progrmg Languages"]
        [course->pre-req 524 "NONE"]
        [course-info 525 "Advanced Distributed Systems"]
        [course->pre-req 525 "NONE"]
        [course-info 526 "Advanced Compiler Construction"]
        [course->pre-req 526 "NONE"]
        [course-info 527 "Topics in Software Engineering"]
        [course->pre-req 527 "NONE"]
        [course-info 528 "Obj-Oriented Progrmg & Design"]
        [course->pre-req 528 "NONE"]
        [course-info 533 "Parallel Computer Architecture"]
        [course-info 536 "Fault-Tolerant Dig Syst Design"]
        [course->pre-req 536 "NONE"]
        [course-info 538 "Advanced Computer Networks"]
        [course->pre-req 538 "NONE"]
        [course-info 541 "Computer Systems Analysis"]
        [course->pre-req 541 "NONE"]
        [course-info 543 "Computer Vision"]
        [course->pre-req 543 "NONE"]
        [course-info 544 "Optimiz in Computer Vision"]
        [course->pre-req 544 "NONE"]
        [course-info 545 "Systems Modeling & Simulation"]
        [course->pre-req 545 "NONE"]
        [course-info 546 "Machine Learning in NLP"]
        [course->pre-req 546 "NONE"]
        [course-info 548 "Models of Cognitive Processes"]
        [course->pre-req 548 "NONE"]
        [course-info 549 "Seminar in Cognitive Science"]
        [course->pre-req 549 "NONE"]
        [course-info 554 "Parallel Numerical Algorithms"]
        [course->pre-req 554 "NONE"]
        [course-info 555 "Numerical Methods for PDEs"]
        [course->pre-req 555 "NONE"]
        [course-info 556 "Iterative & Multigrid Methods"]
        [course->pre-req 556 "NONE"]
        [course-info 558 "Topics in Numerical Analysis"]
        [course->pre-req 558 "NONE"]
        [course-info 563 "Advanced Computer Security"]
        [course->pre-req 563 "NONE"]
        [course-info 565 "Human-Computer Interaction"]
        [course->pre-req 565 "NONE"]
        [course-info 571 "Combinatorial Mathematics"]
        [course->pre-req 571 "NONE"]
        [course-info 572 "Extremal Graph Theory"]
        [course->pre-req 572 "NONE"]
        [course-info 573 "Algorithms"]
        [course->pre-req 573 "NONE"]
        [course-info 574 "Randomized Algorithms"]
        [course->pre-req 574 "NONE"]
        [course-info 575 "Methods of Combinatorics"]
        [course->pre-req 575 "NONE"]
        [course-info 576 "Topics in Automated Deduction"]
        [course->pre-req 576 "NONE"]
        [course-info 579 "Computational Complexity"]
        [course->pre-req 579 "NONE"]
        [course-info 583 "Approximation Algorithms"]
        [course->pre-req 583 "NONE"]
        [course-info 584 "Embedded System Verification"]
        [course->pre-req 584 "NONE"]
        [course-info 591 "Advanced Seminar"]
        [course->pre-req 591 "NONE"]
        [course-info 591 "ACT  Advanced Seminar"]
        [course->pre-req 591 "NONE"]))

     (pldb/db-rel course-info number name)
     (pldb/db-rel course->grouping course-id grouping-id)
     (pldb/db-rel grouping grouping-id description)
     (pldb/db-rel course->pre-req course pre-req-course)

     (pldb/with-db facts
       (doall
        (l/run 10 [q]
          (l/fresh [c1 c2 c3 c4
                    g1 g2 g3 g4
                    c1n c2n c3n c4n]

            (l/== g1 0)
            (course->grouping c1 g1)
            (course-info c1 c1n)
            (course->pre-req c1 "NONE")
            (l/== q [c1 c1n])
            ))))
   #+END_SRC
