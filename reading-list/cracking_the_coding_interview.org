[[../index.org][Main Index]]
[[./index.org][Reading List]]

* Cracking The Coding Interview
+ [X] I. The interview Process
+ [X] II. Behind the Scenes
+ [X] III. Special Situations
+ [X] IV. Before The Interview
+ [X] V. Behavioral Questionss
+ [X] VI. Big O
+ [-] VII. Technical Questions
  1. [X] Arrays and Strings
     1. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_1.java][problem 1]]
     2. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_2.java][problem 2]]
     3. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_3.java][problem 3]]
     4. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_4.java][problem 4]]
     5. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_5.java][problem 5]]
     6. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_6.java][problem 6]]
     7. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_7.java][problem 7]]
     8. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_8.java][problem 8]]
     9. [X] [[./cracking_the_coding_interview/src/main/java/arrays_and_strings/_9.java][problem 9]]
  2. [X] Linked Lists
     1. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_1.java][Problem 1]]
     2. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_2.java][Problem 2]]
     3. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_3.java][Problem 3]]
     4. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_4.java][Problem 4]]
     5. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_5.java][Problem 5]]
     6. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_6.java][Problem 6]]
     7. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_7.java][Problem 7]]
     8. [X] [[./cracking_the_coding_interview/src/main/java/linked_list/_8.java][Problem 8]]
  3. [X] Stacks And Queues
     1. [X] [[./cracking_the_coding_interview/src/main/java/stacks_and_queues/_1.java][Problem 1]]
     2. [X] [[./cracking_the_coding_interview/src/main/java/stacks_and_queues/_2.java][Problem 2]]
     3. [X] [[./cracking_the_coding_interview/src/main/java/stacks_and_queues/_3.java][Problem 3]]
     4. [X] [[./cracking_the_coding_interview/src/main/java/stacks_and_queues/_4.java][Problem 4]]
     5. [X] [[./cracking_the_coding_interview/src/main/java/stacks_and_queues/_5.java][Problem 5]]
     6. [X] [[./cracking_the_coding_interview/src/main/java/stacks_and_queues/_6.java][Problem 6]]
  4. [-] Trees And Graphs
     1. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_1.java][Problem 1]]
     2. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_2.java][Problem 2]]
     3. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_3.java][Problem 3]]
     4. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_4.java][Problem 4]]
     5. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_5.java][Problem 5]]
     6. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_6.java][Problem 6]]
     7. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_7.java][Problem 7]]
     8. [ ] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_8.java][Problem 8]]
     9. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_9.java][Problem 9]]
     10. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_10.java][Problem 10]]
     11. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_11.java][Problem 11]]
     12. [X] [[./cracking_the_coding_interview/src/main/java/trees_and_graphs/_12.java][Problem 12]]
  5. [ ] Bit Manipulation
  6. [ ] Math and Logic Puzzles
  7. [ ] Object Oriented Design
  8. [ ] Recursion and Dynamic Programming
  9. [ ] System Design and Scalability
  10. [-] Sorting and Searching
      1. [X] [[./cracking_the_coding_interview/src/main/java/sorting_and_searching/_1.java][Problem 1]]
      2. [ ]
      3. [ ]
      4. [X] [[./cracking_the_coding_interview/src/main/java/sorting_and_searching/_4.java][Problem 4]]
      5. [ ]
      6. [ ]
      7. [ ]
      8. [ ]
  11. [ ] Testing
  12. [ ] C and C++
  13. [X] Java
      1. [X] Private Constructor: In terms of inheritance, what is the effect of
         keeping a constructor private? Hints: #404
         + If a constructor is private, subclasses cannot invoke it directly,
           unless they are inner classes.
      2. [X] Return from Finally: In Java, does the finally block get executed
         if we insert a return statement inside the try block of a
         try-catch-finally? Hints: #409
         + Yes, it will run unless its thread dies before it can run, or if the
           virtual machine exists before the try catch is finished.
      3. [X] Final, etc.: What is the difference between final, finally, and
         finalize? Hints: #412
         + Final can be used in a few places. On a method, it ensures that a
           subclass cannot override it. On a field, it ensures that once a value
           is set, it cannot be modified. In a method argument, it ensures that
           the value cannot be modified.
         + Finally is used as on optional last block of a try-catch-finally
           block. The finally block can be used to close up any resources, or
           other behavior that you want to ensure happens in excptional
           scenarios.
         + finalize is a method on the Object class. If ovverriden, it will be
           called once the jvm has decided to garbage collect the object.
      4. [X] Generics vs. Templates: Explain the difference between templates in
         C++ and generics in Java. Hints: #416, #425
         + From what I know of Templates in C++, they generate code that will
           exist at runtime for each type, whereas java erases the type
           information and simply applies the correct casts as necessary. Static
           variables are shared accross all generics for this reason, this is
           not the case in C++. C++ will have a different static variable for
           each type.
      5. [X] TreeMap, HashMap, LinkedHashMap: Explain the differences between
         TreeMap, HashMap, and LinkedHashMap. Provide an example of when each
         one would be best. Hints: #420, #424, #430, #454
         + HashMap gives O(1) lookup and insertion.
         + TreeMap gives O(log(n)) lookup and insertion, but the keys are
           ordered. Keys must be Comparable for this reason.
         + LinkedHashMap gives O(1) lookup and insertion, but keys are ordered
           by their insertion order.
      6. [X] Object Reflection: Explain what object reflection is in Java and
         why it is useful. Hints :#435
         + Reflection is a mechanism in which you can do metaprogramming Java.
           It is the mechanism through which Annotations work, and it makes a
           way in which code can be completely generically invoked.
      7. [X] Lambda Expressions: There is a class Country that has methods
         getContinent() and getPopulation(). Write a function int
         getPopulation(List<Country> countries, String continent) that computes
         the total population of a given continent, given a list of all
         countries and the name of a continent. Hints:#448, #467, #464
           #+BEGIN_SRC java
             Stream<Country> northAmerica =
                 countries
                 .stream()
                 .filter(country -> {return country.getContintent().equals(content);})
                 .map(c -> c.getPopulation())
                 .reduce(0, (a, b) -> a + b)
           #+END_SRC
      8. [X] Lambda Random: Using Lambda expressions, write a function
         List<Integer> getRandomSubset(List<Integer> list) that returns a random
         subset of arbitrary size. All subsets (including the empty set) should
         be equally likely to be chosen. Hints: #443, #450, #457
         #+BEGIN_SRC java
           List<Integer> getRandomSubset(List<Integer> list) {
               Random random = new Random();
               List<Integer> = subset = list
                   .stream()
                   .filter(k -> {return random.nextBoolean();})
                   .collect(Collectors.toList());
               return subset;
           }
         #+END_SRC
  14. [ ] Databases
  15. [ ] Threads and Locks
  16. [ ] Moderate
  17. [ ] Hard
+ [ ] VIII. The Offer and Beyond
+ [ ] IX. Interview Questions
+ [ ] X. Solutions
+ [ ] XI. Advanced Topics
+ [ ] XII. Code Library
+ [ ] XIII. Hints
+ [ ] XIV. About the Author
