+ [[../index.org][Main Index]]
+ [[./index.org][Reading List]]

* [[./books/the_little_schemer.pdf][The Little Schemer]]
1) [ ] Toys
   #+BEGIN_SRC scheme

     (load "the_little_schemer/ls.scm") ;; => #<unspecified>

     (atom? 'atom) ;; => #t
     (atom? 'turkey) ;; => #t
     (atom? 1492) ;; => #t
     (atom? 'u) ;; => #t
     (atom? '*abc$) ;; => #t

     (list? '(atom)) ;; => #t
     (list? '(atom turkey or)) ;; => #t
     ;; (list? '(atom turkey) 'or) => not a list. doesn't even compile
     (list? '((atom turkey) or)) ;; => #t

     (define sexp?
       (lambda (x)
         (or (atom? x)
             (list? x)))) ;; => #<unspecified>

     (sexp? 'xyz) ;; => #t
     (sexp? '(x y z)) ;; => #t
     (sexp? '((x y) z)) ;; => #t

     (list? '(how are you doing so far)) ;; => #t
     (define num-sexps?
       (lambda (sexp)
         (letrec
             ((num-sexps? (lambda (sexp acc)
                            (cond
                             ((null? sexp) acc)
                             ((atom? sexp) (add1 acc))
                             (else (num-sexps? (cdr sexp) (add1 acc)))))))
           (num-sexps? sexp 0)))) ;; => #<unspecified>
     (num-sexps? '(how are you doing so far)) ;; => 6
     (list? '(((how) are) ((you) (doing so)) far)) ;; => #t
     (num-sexps? '(((how) are) ((you) (doing so)) far)) ;; => 3

     (list? '()) ;; => #t
     (atom? '()) ;; => #f
     (list? '(() () () ())) ;; => #t

     (car '(a b c)) ;; => a
     (car '((a b c) x y z)) ;; => (a b c)
     ;; (car 'hotdog) => doesn't have a car. You can't ask for the car of an atom.
     ;; (car '()) => doesn't have a car. You can't ask for the car of the empty list.

     ;; The Law of Car
     ;; The primitive car is defined only for non-empty lists.

     (car '(((hotdogs)) (and) (pickle) relish)) ;; => ((hotdogs))
     (car '(((hotdogs)) (and) (pickle) relish)) ;; => ((hotdogs))
     (car (car '(((hotdogs)) (and)))) ;; => (hotdogs)

     (cdr '(a b c)) ;; => (b c)
     (cdr '((a b c) x y z)) ;; => (x y z)
     (cdr '(hamburger)) ;; => ()
     (cdr '((x) t r)) ;; => (t r)
     ;; (cdr 'hotdogs) => doesn't have a cdr. You can't ask for the cdr of an atom.
     ;; (cdr '()) => doesn't have a cdr. You can't ask for the cdr of the empty list.

     ;; The Law of Cdr

     ;; The primitive cdr is defined only for non-lists. The cdr of any
     ;; non-empty list is always another list.

     (car (cdr '((b) (x y) ((c))))) ;; => (x y)
     (cdr (cdr '((b) (x y) ((c))))) ;; => (((c)))
     ;; (cdr (car '(a (b (c)) d))) => doesn't have an answer. You can't take the cdr of an atom.
     (cons 'peanut '(butter and jelly)) ;; => (peanut butter and jelly)
     (cons '(banana and) '(peanut butter and jelly)) ;; => ((banana and) peanut butter and jelly)
     (cons '((help) this) '(is very ((hard) to learn))) ;; => (((help) this) is very ((hard) to learn))

     ;; STOPPED ON PAGE 8
   #+END_SRC
2) [ ] Do It, Do It Again, and Again, and Again 
3) [ ] Cons the Magnificent
4) [ ] Numbers Games
5) [ ] *Oh My Gawd*: It's Full of Stars
6) [ ] Shadows
7) [ ] Friends and Relations
8) [ ] Lambda the Ultimate
9) [ ] and Again, and Again, and Again
10) [ ] What Is the Value of All of This?
