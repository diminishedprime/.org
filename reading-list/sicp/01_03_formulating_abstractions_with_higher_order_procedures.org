        1. [X] Procedures as Arguments
           #+BEGIN_SRC scheme
             (define (sum-integers a b)
               (if (> a b)
                   0
                   (+ a (sum-integers (+ a 1) b))))

             (define (sum-cubes a b)
               (define (cube a)
                 (* a a a))
               (if (> a b)
                   0
                   (+ (cube a)
                      (sum-cubes (+ a 1) b))))

             (define (pi-sum a b)
               (if (> a b)
                   0
                   (+ (/ 1.0 (* a (+ a 2)))
                      (pi-sum (+ a 4) b))))

             ;; There is a lot of repeating. All of these methods share
             ;; commonality, the only difference is the details of what is done to
             ;; a, and the incrementation procedure.

             (define (sum term a next b)
               (if (> a b)
                   0
                   (+ (term a)
                      (sum term (next a) next b))))

             (define (sum-cubes a b)
               (define (cube a)
                 (* a a a))
               (define (inc a)
                 (+ a 1))
               (sum cube a inc b))
             (sum-cubes 1 10)

             (define (sum-integers a b)
               (define (identity x)
                 x)
               (define (inc a)
                 (+ a 1))
               (sum identity a inc b))
             (sum-integers 1 4)

             (define (pi-sum a b)
               (define (pi-term x)
                 (/ 1.0 (* x (+ x 2))))
               (define (pi-next x)
                 (+ x 4))
               (sum pi-term a pi-next b))


               (define (integral f a b dx)
               (define (add-dx x)
                 (+ x dx))
               (* (sum f
                       (+ a (/ dx 2.0))
                       add-dx
                       b)
                  dx))

             (integral (lambda (x) (* x x x))
                       0 1 .001)
           #+END_SRC
        2. [X] Constructing Procedures Using lambda
           #+BEGIN_SRC scheme
             (lambda (x) (+ x 4))
             (lambda (x) (/ 1.0 (* x (+ x 2))))

             (define (sum term a next b)
               (if (> a b)
                   0
                   (+ (term a)
                      (sum term (next a) next b))))
             (define (pi-sum a b)
               (sum (lambda (x)
                      (/ 1.0 (* x (+ x 2))))
                    a
                    (lambda (x)
                      (+ x 4))
                    b))

             (pi-sum 1 100)


             (define (integral f a b dx)
               (* (sum f
                       (+ a (/ dx 2.0))
                       (lambda (x)
                         (+ x dx))
                       b)
                  dx))
             (integral (lambda (x) (* x x x))
                       0
                       1
                       .001)
           #+END_SRC
        3. [ ] Procedures as General Methods
           #+BEGIN_SRC scheme
             (define (search f neg-point pos-point)
               (define (close-enough? x y)
                 (< (abs (- x y)) .001))
               (define (average x y)
                 (/ (+ x y) 2))
               (let ((midpoint (average neg-point pos-point)))
                 (if (close-enough? neg-point pos-point)
                     midpoint
                     (let ((test-value (f midpoint)))
                       (cond ((positive? test-value)
                              (search f neg-point midpoint))
                             ((negative? test-value)
                              (search f midpoint pos-point))
                             (else midpoint))))))

             (define (half-interval-method f a b)
               (let (())))
           #+END_SRC
        4. [ ] Procedures as Returned Values
