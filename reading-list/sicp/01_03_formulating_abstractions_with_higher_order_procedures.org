+ [[../index.org][Reading Index]]
+ [[../mit_sicp.org][SICP]]

* Formulating Abstractions with Higher-Order Procedures
1. [X] Procedures as Arguments
   #+BEGIN_SRC scheme
     (define (sum-integers a b)
       (if (> a b)
           0
           (+ a (sum-integers (+ a 1) b))))

     (define (sum-cubes a b)
       (define (cube a)
         (* a a a))
       (if (> a b)
           0
           (+ (cube a)
              (sum-cubes (+ a 1) b))))

     (define (pi-sum a b)
       (if (> a b)
           0
           (+ (/ 1.0 (* a (+ a 2)))
              (pi-sum (+ a 4) b))))

     ;; There is a lot of repeating. All of these methods share commonality, the only
     ;; difference is the details of what is done to a, and the increment procedure.

     (define (sum term a next b)
       (if (> a b)
           0
           (+ (term a)
              (sum term (next a) next b))))

     (define (sum-cubes a b)
       (define (cube a)
         (* a a a))
       (define (inc a)
         (+ a 1))
       (sum cube a inc b))

     (sum-cubes 1 10)

     (define (sum-integers a b)
       (define (identity x)
         x)
       (define (inc a)
         (+ a 1))
       (sum identity a inc b))

     (sum-integers 1 4)

     (define (pi-sum a b)
       (define (pi-term x)
         (/ 1.0 (* x (+ x 2))))
       (define (pi-next x)
         (+ x 4))
       (sum pi-term a pi-next b))

     (define (integral f a b dx)
       (define (add-dx x)
         (+ x dx))
       (* (sum f
               (+ a (/ dx 2.0))
               add-dx
               b)
          dx))

     (integral (lambda (x) (* x x x))
               0 1 .001)
   #+END_SRC
2. [X] Constructing Procedures Using lambda
   #+BEGIN_SRC scheme
     (lambda (x) (+ x 4))

     (lambda (x) (/ 1.0 (* x (+ x 2))))

     (define (sum term a next b)
       (if (> a b)
           0
           (+ (term a)
              (sum term (next a) next b))))

     (define (pi-sum a b)
       (sum (lambda (x)
              (/ 1.0 (* x (+ x 2))))
            a
            (lambda (x)
              (+ x 4))
            b))

     (pi-sum 1 100)

     (define (integral f a b dx)
       (* (sum f
               (+ a (/ dx 2.0))
               (lambda (x)
                 (+ x dx))
               b)
          dx))

     (integral (lambda (x) (* x x x))
               0
               1
               .001)
   #+END_SRC
3. [X] Procedures as General Methods
   #+BEGIN_SRC scheme
     (define (search f neg-point pos-point)
       (define (close-enough? x y)
         (< (abs (- x y)) .001))
       (define (average x y)
         (/ (+ x y) 2))
       (let ((midpoint (average neg-point pos-point)))
         (if (close-enough? neg-point pos-point)
             midpoint
             (let ((test-value (f midpoint)))
               (cond ((positive? test-value)
                      (search f neg-point midpoint))
                     ((negative? test-value)
                      (search f midpoint pos-point))
                     (else midpoint))))))

     (define (half-interval-method f a b)
       (let ((a-value (f a))
             (b-value (f b)))
         (cond ((and (negative? a-value) (positive? b-value))
                (search f a b))
               ((and (negative? b-value) (positive? a-value))
                (search f b a))
               (else
                (error "Values are not of opposite sign" a b)))))

     (define tolerance 0.00001)

     (define (fixed-point f first-guess)
       (define (close-enough? v1 v2)
         (< (abs (- v1 v2)) tolerance))
       (define (try guess)
         (let ((next (f guess)))
           (if (close-enough? guess next)
               next
               (try next))))
       (try first-guess))

     (define (average x y)
       (/ (+ x y)
          2))

     (define (sqrt x)
       (fixed-point (lambda (y) (average y (/ x y)))
                    1.0))
   #+END_SRC
4. [X] Procedures as Returned Values
   #+BEGIN_SRC scheme
     (define (average x y)
       (/ (+ x y)
          2))

     (define (average-damp f)
       (lambda (x) (average x (f x))))

     (define (square x)
       (* x x))

     ((average-damp square) 10) ;; => 55

     (define (sqrt x)
       (fixed-point (average-damp (lambda (y) (/ x y)))
                    1.0))

     (sqrt 3.0) ;; => 1.7320508075688772

     (define (cube-root x)
       (fixed-point (average-damp (lambda (y) (/ x (square y))))
                    1.0))

     (cube-root 8) ;; => 1.9999981824788517

     (define dx 0.00001)

     (define (deriv g)
       (lambda (x)
         (/ (- (g (+ x dx)) (g x))
            dx)))

     (define (cube x) (* x x x))

     x^3

     ((deriv cube) 5) ;; => 75.00014999664018

     (define (newton-transform g)
       (lambda (x)
         (- x (/ (g x) ((deriv g) x)))))

     (define (newtons-method g guess)
       (fixed-point (newton-transform g) guess))

     (define (sqrt x)
       (newtons-method (lambda (y) (- (square y) x))
                       1.0))

     (sqrt 2.0) ;; => 1.4142135623822438

     (define (fixed-point-of-transform g transform guess)
       (fixed-point (transform g) guess))

     (define (sqrt x)
       (fixed-point-of-transform (lambda (y) (/ x y))
                                 average-damp
                                 1.0))

     (sqrt 2) ;; => 1.4142135623746899

     (define (sqrt x)
       (fixed-point-of-transform (lambda (y) (- (square y) x))
                                 newton-transform
                                 1.0))

     (sqrt 2) ;; => 1.4142135623822438
   #+END_SRC
