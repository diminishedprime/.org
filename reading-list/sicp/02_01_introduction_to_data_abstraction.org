+ [[../index.org][Reading Index]]
+ [[../mit_sicp.org][SICP]]

* Introduction To Data Abstraction
1) [X] Example: Arithmetic Operations for rational numbers
   #+BEGIN_SRC scheme
     (define (make-rat n d)
       (let ((g (gcd n d)))
         (cons (/ n g)
               (/ d g))))

     (define (numer x) (car x))
     (define (denom x) (cdr x))

     (define (add-rat x y)
       (make-rat (+ (* (numer x) (denom y))
                    (* (numer y) (denom x)))
                 (* (denom x) (denom y))))

     (define (sub-rat x y)
       (make-rat (- (* (numer x) (denom y))
                    (* (numer y) (denom x)))
                 (* (denom x) (denom y))))

     (define (mul-rat x y)
       (make-rat (* (numer x) (numer y))
                 (* (denom x) (denom y))))

     (define (div-rat x y)
       (make-rat (* (numer x) (denom y))
                 (* (denom x) (numer y))))

     (define (equal-rat? x y)
       (= (* (numer x) (denom y))
          (* (denom x) (numer y))))

     (define (print-rat x)
       (newline)
       (display (numer x))
       (display "/")
       (display (denom x)))

     ;; Some examples...
     (define one-half (make-rat 1 2))
     (print-rat one-half)

     (define one-third (make-rat 1 3))


     (print-rat (add-rat one-half one-third))
     (print-rat (mul-rat one-third one-half))
     (print-rat (add-rat one-third one-third))
   #+END_SRC
2) [X] Abstraction Barriers
3) [X] What is meant by data?
   #+BEGIN_SRC scheme
     (define (cons x y)
       (define (dispatch m)
         (cond
          ((= m 0) x) ((= m 1) y)
          (else (error "Argument not 0 or 1: CONS" m))))
       dispatch)
     (define (car z)
       (z 0))
     (define (cdr z) (z 1))
   #+END_SRC
4) [ ] Extended Exercise: other stuff...
