        1. [X] Linear Recursion and Iteration
           #+BEGIN_SRC scheme
             ;; naive factorial procedure
             (define (factorial n)
               (if (= n 1)
                   1
                   (* n (factorial (- n 1)))))
             (factorial 6)

             ;; better version of factorial that uses an accumulator which will use
             ;; less memory.
             (define (factorial n)
               (fact-iter 1 1 n))
             (define (fact-iter product counter max-count)
               (if (> counter max-count)
                   (fact-iter (* counter product)
                              (+ counter 1)
                              max-count)))
             (factorial 6)
           #+END_SRC
        2. [X] Tree Recursion
           #+BEGIN_SRC scheme
             (define (fib n)
               (cond ((< n 2) n)
                     (else (+ (fib (- n 1))
                              (fib (- n 2))))))

             (define (fib n)
               (fib-iter 1 0 n))
             (define (fib-iter a b count)
               (if (= count 0)
                   b
                   (fib-iter (+ a b)
                             a
                             (- count 1))))

             (define (count-change amount) (cc amount 5))
             (define (cc amount kinds-of-coins)
               (cond ((= amount 0) 1)
                     ((or (< amount 0) (= kinds-of-coins 0)) 0)
                     (else (+ (cc amount
                                  (- kinds-of-coins 1))
                              (cc (- amount
                                     (first-denomination
                                      kinds-of-coins))
                                  kinds-of-coins)))))
             (define (first-denomination kinds-of-coins)
               (cond ((= kinds-of-coins 1) 1)
                     ((= kinds-of-coins 2) 5)
                     ((= kinds-of-coins 3) 10)
                     ((= kinds-of-coins 4) 25)
                     ((= kinds-of-coins 5) 50)))

             (count-change 100)
           #+END_SRC
        3. [X] Orders of Growth
        4. [X] Exponentiation
           #+BEGIN_SRC scheme
             ;; linear recursion
             (define (exp b n)
               (if (= n 0)
                   1
                   (* b
                      (exp b (- n 1)))))
             (exp 3 3)


             ;; Iterative recursion
             (define (exp b n)
               (define (exp-iter b counter product)
                 (if (= counter 0)
                     product
                     (exp-iter b
                               (- counter 1)
                               (* B product))))
               (exp-iter b n 1))
             (exp 3 3)

             ;; Better performance because decreases number of multiplications.
             (define (fast-exp b n)
               (cond ((= n 0) 1)
                     ((even? n) (square (fast-exp b (/ n 2))))
                     (else (* b (fast-exp b (- n 1))))))
             (fast-exp 3 3)
           #+END_SRC
        5. [X] Greatest Common Divisors.
           #+BEGIN_SRC scheme
             ;; GCD via Euclid's algorithm.
             (define (gcd a b)
               (if (= b 0)
                   a
                   (gcd b (remainder a b))))
             (gcd 12 6)
           #+END_SRC
        6. [X] Example: Testing for Primalgfity
           #+BEGIN_SRC scheme
             ;;
             (define (smallest-divisor n)
               (define (divides? a b)
                 (= (remainder b a) 0))
               (define (find-divisor n test-divisor)
                 (cond ((> (square test-divisor) n) n)
                       ((divides? test-divisor n) test-divisor)
                       (else (find-divisor n (+ test-divisor 1)))))
               (find-divisor n 2))

             (define (prime? n)
               (= (smallest-divisor n) n))

             (prime? 13)
             (prime? 12)

             ;; Fermat's Test for primality
             (define (expmod base exp m)
               (cond ((= exp 0) 1)
                     ((even? exp) (remainder (square (expmod base (/ exp 2) m))
                                             m))
                     (else (remainder (* base (expmod base (- exp 1) m))
                                      m))))

             (define (fermat-test n)
               (define (try-it a)
                 (= (expmod a n n) a))
               (try-it (+ 1 (random (- n 1)))))

             (define (fast-prime n times)
               (cond ((= times 0) true)
                     ((fermat-test n) (fast-prime n (- times 1)))
                     (else false)))

             (fast-prime 12 3)
             (fast-prime 13 3)
           #+END_SRC
