[[../index.org][Reading List]]
[[../the_little_mler.org][The Little MLer]]

* Oh No!
#+BEGIN_SRC sml
  datatype 'a list =
           Empty
           | Cons of 'a * 'a list;

  datatype bacon_or_index =
           Bacon
           | Index of int;

  val three = Cons(Index(5),
                   Cons(Index(13),
                        Cons(Bacon,
                             Cons(Index(8),
                                  Empty))));
  val one = Cons(Bacon,
                 Cons(Index(8),
                      Empty));

  val zero = Cons(Index(5),
                  Cons(Index(13),
                       Cons(Index(8),
                            Empty)));

  fun is_bacon (Bacon) = true
    | is_bacon (x) = false;

  exception No_bacon of int;

  fun where_is (Empty) = raise No_bacon(0)
    | where_is (Cons(value, next)) =
      if is_bacon(value)
      then 1
      else 1 + where_is(next);

  (where_is(one) handle No_bacon(an_int) => an_int);
  (where_is(three) handle No_bacon(an_int) => an_int);
  (where_is(zero) handle No_bacon(an_int) => an_int);

  exception Out_of_range;

  fun list_item (n, Empty) = raise Out_of_range
    | list_item (n, Cons(value, next)) =
      if eq_int(n, 1)
      then value
      else list_item(n - 1, next);

  fun find (n, boxes) = check(n, boxes, list_item(n, boxes))
                        handle Out_of_range => find(n div 2, boxes)
  and check (n, boxes, Bacon) = n
    | check (n, boxes, Index(i)) = find(i, boxes);

  val t = Cons(Index(5),
               Cons(Index(4),
                    Cons(Bacon,
                         Cons(Index(2),
                              Cons(Index(7),
                                   Empty)))));

  find(1, t);

  fun path (n, boxes) = Cons(n,
                             (check(boxes, list_item(n, boxes))
                              handle Out_of_range => path(n div 2, boxes)))
  and check (boxes, Bacon) = Empty
    | check (boxes, Index(i)) = path(i, boxes);
#+END_SRC
