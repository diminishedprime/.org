[[../index.org][Reading List]]
[[../the_little_mler.org][The Little MLer]]

* Bows and Arrows
#+BEGIN_SRC sml
  datatype 'a list =
           Empty
           | Cons of 'a *'a list;

  datatype orapl =
           Orange
         | Apple;

  fun eq_orapl (Orange, Orange) = true
    | eq_orapl (Apple, Apple) = true
    | eq_orapl _ = false;

  fun subst_int (n, a, Empty) = Empty
    | subst_int (n, a, Cons(e, t)) = if eq_int(a, e)
                                     then Cons(n, subst_int(n, a, t))
                                     else Cons(e, subst_int(n, a, t));

  fun subst_orapl (n, a, Empty) = Empty
    | subst_orapl (n, a, Cons(e, t)) = if eq_orapl(a, e)
                                       then Cons(n, subst_orapl(n, a, t))
                                       else Cons(e, subst_orapl(n, a, t));

  fun subst (relation, n, a, Empty) = Empty
    | subst (relation, n, a, Cons(e, t)) = if relation(a, e)
                                           then Cons(n, subst(relation, n, a, t))
                                           else Cons(e, subst(relation, n, a, t));
  (subst : ((('b * 'a) -> bool) * 'a * 'b * 'a list) -> 'a list);

  val int_list = Cons(15, Cons(6, Cons(15,Cons(17,Cons(15,Cons(8,Empty))))));

  subst(eq_int, 11, 15, int_list);
  subst((op <), 11, 15, int_list);

  fun in_rarge ((small, large), x) =
    if small < x
    then x < large
    else false;

  subst(in_range, 0, (0, 10), int_list);

  fun subst_pred (pred, n, Empty) = Empty
    | subst_pred (pred, n, Cons(e, t)) =
      if pred(e)
      then Cons(n, subst_pred(pred, n, t))
      else Cons(e, subst_pred(pred, n, t));

  fun is_15 (n) = eq_int(n, 15);
  subst_pred(is_15, 0, int_list);

  fun less_than_15 (n) = n < 15;
  subst_pred(less_than_15, 0, int_list);

  fun in_range_11_16(x) = 11 < x andalso x < 16;
  subst_pred(in_range_11_16, 0, int_list);

  fun in_range_c(small, large)(x) =
    small < x andalso x < large;

  in_range_c(11, 12);

  fun subst_c (pred)(n, Empty) = Empty
    | subst_c (pred)(n, Cons(e, t)) =
      if pred(e)
      then Cons(n, subst_c(pred)(n, t))
      else Cons(e, subst_c(pred)(n, t));

  fun combine (Empty, l2) = l2
    | combine (Cons(a, l1), l2) = Cons(a, combine(l1, l2));

  combine(int_list, int_list);

  fun combine_c (Empty)(l2) = l2
    | combine_c (Cons(a, l1))(l2) = Cons(a, combine_c(l1)(l2));

  combine_c(int_list)(int_list);

  fun base(l2) = l2;

  fun combine_s (Empty) = base
    | combine_s (Cons(a, l1)) = make_cons(a, combine_s(l1))
  and make_cons(a, f)(l2) = Cons(a, f(l2));

  combine_s(int_list)(int_list);
#+END_SRC
