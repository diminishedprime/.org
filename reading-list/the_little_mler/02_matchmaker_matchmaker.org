[[../index.org][Reading List]]
[[../the_little_mler.org][The Little MLer]]

* Matchmaker, Matchmaker
#+BEGIN_SRC sml
  datatype shish_kebab =
           Skewer
           | Onion of shish_kebab
           | Lamb of shish_kebab
           | Tomato of shish_kebab;

  val only_onions_skewer =
      Onion(
          Onion(
              Onion(
                  Skewer)));

  fun only_onions(Skewer) = true
    | only_onions (Onion(x)) = only_onions(x)
    | only_onions (Lamb(x)) = false
    | only_onions (Tomato(x)) = false;
  (only_onions : shish_kebab -> bool);

  val skewer = only_onions(Skewer);
  val onion_skewer = only_onions(Onion(Skewer));
  val tomato_skewer = only_onions(Tomato(Skewer));
  val name = only_onions(only_onions_skewer);
  val almost_onions = only_onions(Onion(Onion(Onion(Tomato(Skewer)))));

  fun vegetarian(Skewer) = true
    | vegetarian (Onion(x)) = vegetarian(x)
    | vegetarian (Lamb(x)) = false
    | vegetarian (Tomato(x)) = vegetarian(x);
  (vegetarian : shish_kebab -> bool);

  val stuff = vegetarian(Tomato(Skewer));
  val other_stuff = vegetarian(Tomato(Lamb(Skewer)));

  datatype 'a shish =
           Bottom of 'a
           | Onion of 'a shish
           | Lamb of 'a shish
           | Tomato of 'a shish;

  datatype rod =
           Dagger
         | Fork
         | Sword;

  datatype plate =
           Gold_plate
         | Silver_plate
         | Brass_plate;

  val dagger_shit = Onion(Tomato(Bottom Dagger));

  val plate_shit = Onion(Tomato(Bottom(Gold_plate)));

  fun is_veggie (Bottom(x)) = true
    | is_veggie (Onion(x)) = is_veggie(x)
    | is_veggie (Lamb(x)) = false
    | is_veggie (Tomato(x)) = is_veggie(x);
  (is_veggie : 'a shish -> bool);

  val plate_veggie = is_veggie(plate_shit);

  fun what_bottom (Bottom(x)) = x
    | what_bottom (Onion(x)) = what_bottom(x)
    | what_bottom (Lamb(x)) = what_bottom(x)
    | what_bottom (Tomato(x)) = what_bottom(x);

  val my_thing = what_bottom(Onion(Bottom(13)));
#+END_SRC
