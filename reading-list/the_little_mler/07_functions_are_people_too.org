[[../index.org][Reading List]]
[[../the_little_mler.org][The Little MLer]]

* Functions Are People, Too
#+BEGIN_SRC sml
  fun identity(x) = x;
  (identity : 'x -> 'x);

  fun true_maker(x) = true;
  (true_maker : 'x -> bool);

  datatype bool_or_int =
           Hot of bool
           | Cold of int;

  Hot(true);

  Cold(10);

  fun hot_maker(x) = Hot;

  fun help(f)
    = Hot(
        true_maker(
            if true_maker(5)
            then f
            else true_maker));

  datatype chain = Link of (int * (int -> chain));

  fun ints(n) = Link(n + 1, ints);

  ints(1);

  fun skips(n) = Link(n + 2, skips);

  skips(8);
  skips(17);

  fun eq_int(a, b) = (a = b)

  fun divides_evenly(n, c) =
    eq_int((n mod c), 0);

  fun is_mod_5_or_7(n) =
    divides_evenly(n, 5) orelse divides_evenly(n, 7);

  fun some_ints(n)
    = if is_mod_5_or_7(n + 1)
      then Link(n + 1, some_ints)
      else some_ints(n + 1);

  some_ints(1);
  some_ints(17);

  fun chain_item(n, Link(i, f)) =
    if eq_int(n, 1)
    then i
    else chain_item(n - 1, f(i));

  chain_item(2, some_ints(1));

  fun is_prime(n) = has_no_divisors(n, n - 1)
  and has_no_divisors(n, c) =
      if (eq_int(c, 1))
      then true
      else if divides_evenly(n, c)
      then false
      else has_no_divisors(n, c-1);

  fun primes(n)
    = if is_prime(n + 1)
      then Link(n + 1, primes)
      else primes(n + 1);

  chain_item(100, primes(1));

  fun fibs(n)(m)
    = Link(n + m, fibs(m));

  Link(0, fibs(1));

  fun fibs_1(m) = Link(1 + m, fibs(m));

  chain_item(1, fibs(0)(1));
  chain_item(2, fibs(0)(1));
  chain_item(3, fibs(0)(1));
  chain_item(4, fibs(0)(1));
  chain_item(5, fibs(0)(1));
  chain_item(9, fibs(0)(1));


#+END_SRC
