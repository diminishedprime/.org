[[../index.org][Reading List]]
[[../the_little_prover.org][The Little Prover]]

* Exercises
#+BEGIN_SRC scheme
  (load "j-bob-lang.scm") ;; => #<unspecified>
  (load "j-bob.scm") ;; => #<unspecified>

  ;;;;;;;;;;;;;;;;;;;;;;
  ;; Chapter 3 Proofs ;;
  (defun defun.pair ()
    (J-Bob/define (prelude)
                  '(((defun pair (x y)
                       (cons x (cons y '())))
                     nil)))) ;; => #<unspecified>

  (defun defun.first-of ()
    (J-Bob/define (defun.pair)
                  '(((defun first-of (x)
                       (car x))
                     nil)))) ;; => #<unspecified>

  (defun defun.second-of ()
    (J-Bob/define (defun.first-of)
                  '(((defun second-of (x)
                       (car (cdr x)))
                     nil)))) ;; => #<unspecified>

  (defun dethm.first-of-pair ()
    (J-Bob/define (defun.second-of)
                  '(((dethm first-of-pair (a b)
                            (equal (first-of (pair a b)) a))
                     nil
                     ((1 1) (pair a b))
                     ((1) (first-of (cons a (cons b '()))))
                     ((1) (car/cons a (cons b '())))
                     (() (equal-same a)))))) ;; => #<unspecified>

  (defun dethm.second-of-pair ()
    (J-Bob/define (dethm.first-of-pair)
                  '(((dethm second-of-pair (a b)
                            (equal (second-of (pair a b)) b))
                     nil
                     ((1) (second-of (pair a b)))
                     ((1 1 1) (pair a b))
                     ((1 1) (cdr/cons a (cons b '())))
                     ((1) (car/cons b '()))
                     (() (equal-same b)))))) ;; => #<unspecified>

  (defun defun.in-pair? ()
    (J-Bob/define (dethm.second-of-pair)
                  '(((defun in-pair? (xs)
                       (if (equal (first-of xs) '?) 't (equal (second-of xs) '?)))
                     nil)))) ;; => #<unspecified>

  (defun dethm.in-first-of-pair ()
    (J-Bob/define (dethm.second-of-pair)
                  '(((dethm in-first-of-pair (b)
                            (equal (in-pair? (pair '? b)) 't))
                     nil
                     ((1 1) (pair '? b))
                     ((1) (in-pair? (cons '? (cons b '()))))
                     ((1 Q 1) (first-of (cons '? (cons b '()))))
                     ((1 Q 1) (car/cons '? (cons b '())))
                     ((1 Q) (equal-same '?))
                     ((1) (if-true 't (equal (second-of (cons '? (cons b '()))))))
                     (() (equal-same 't)))))) ;; => #<unspecified>

  (defun dethm.in-second-of-pair ()
    (J-Bob/define (dethm.in-first-of-pair)
                  '(((dethm in-second-of-pair (a)
                            (equal (in-pair? (pair a '?)) 't))
                     nil
                     ((1 1) (pair a '?))
                     ((1) (in-pair? (cons a (cons '? '()))))
                     ((1 Q 1) (first-of (cons a (cons '? '()))))
                     ((1 Q 1) (car/cons a (cons '? '())))
                     ((1 E 1) (second-of (cons a (cons '? '()))))
                     ((1 E 1 1) (cdr/cons a (cons '? '())))
                     ((1 E 1) (car/cons '? '()))
                     ((1 E) (equal-same '?))
                     ((1) (if-same (equal a '?) 't))
                     (() (equal-same 't)))))) ;; => #<unspecified>

  ;;;;;;;;;;;;;;;;;;;;;;
  ;; Chapter 4 Proofs ;;
  (defun defun.list0? ()
    (J-Bob/define (dethm.in-second-of-pair)
                  '(((defun list0? (x)
                       (equal x '()))
                     nil)))) ;; => #<unspecified>

  (defun defun.list1? ()
    (J-Bob/define (defun.list0?)
                  '(((defun list1? (x)
                       (if (atom x)
                           'nil
                           (list0? (cdr x))))
                     nil)))) ;; => #<unspecified>

  (defun defun.list2? ()
    (J-Bob/define (defun.list1?)
                  '(((defun list2? (x)
                       (if (atom x)
                           'nil
                           (list1? (cdr x))))
                     nil)))) ;; => #<unspecified>

  (defun defun.list? ()
    (J-Bob/define (defun.list2?)
                  '(((defun list? (x)
                       (if (atom x)
                           (equal x '())
                           (list? (cdr x))))
                     (size x)
                     ((Q) (natp/size x))
                     (() (if-true (if (atom x)
                                      't
                                      (< (size (cdr x)) (size x))) 'nil))
                     ((E) (size/cdr x))
                     (() (if-same (atom x) 't)))))) ;; => #<unspecified>

  (defun defun.sub ()
    (J-Bob/define (defun.list?)
                  '(((defun sub (x y)
                       (if (atom y)
                           (if (equal y '?)
                               x
                               y)
                           (cons (sub x (car y))
                                 (sub x (cdr y)))))
                     (size y)
                     ((Q) (natp/size y))
                     (() (if-true
                          (if (atom y)
                              't
                              (if (< (size (car y)) (size y))
                                  (< (size (cdr y)) (size y))
                                  'nil))
                          'nil))
                     ((E Q) (size/car y))
                     ((E A) (size/cdr y))
                     ((E) (if-true 't 'nil))
                     (() (if-same (atom y) 't)))))) ;; => #<unspecified>
#+END_SRC
