[[../index.org][Reading List]]
[[../the_little_prover.org][The Little Prover]]

* Even Older Games
#+BEGIN_SRC scheme
  (load "j-bob-lang.scm") ;; => #<unspecified>
  (load "j-bob.scm") ;; => #<unspecified>

  (dethm if-true (x y)
         (equal (if 't x y) x)) ;; => #<unspecified>

  (dethm if-false (x y)
         (equal (if 'nil x y) y)) ;; => #<unspecified>

  (dethm if-same (x y)
         (equal (if x y y) y)) ;; => #<unspecified>

  (dethm equal-same (x)
         (equal (equal x x) 't)) ;; => #<unspecified>

  (dethm equal-swap (x y)
         (equal (equal x y) (equal y x))) ;; => #<unspecified>

  (dethm equal-if (x y)
         (if (equal x y) (equal x y) 't)) ;; => #<unspecified>

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; The Law of Dethm (final) ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; For any theorem (dethm name (x₁ ... xn) bodyₓ), the variables x₁ ... xn in
  ;; bodyₓ can be replaced with any corresponding expressions e₁ ... en. The
  ;; result, bodyₑ, can be used to rewrite a focus as follows.

  ;; 1. bodyₑ must contain the conclusion (equal p q) or (equal q p),

  ;; 2. the conclusion must not be found in the question of any if or in the
  ;; argument of any function application.

  ;; 3. and if the conclusion can be found in an if answer (respectively else),
  ;; then the focus must be found in an if answer (respectively else) with the
  ;; same question.

  ;; The Axioms of Cons (final)
  (dethm atom/cons (x y)
         (equal (atom (cons x y)) 'nil)) ;; => #<unspecified>

  (dethm car/cons (x y)
         (equal (car (cons x y)) x)) ;; => #<unspecified>

  (dethm cdr/cons (x y)
         (equal (cdr (cons x y)) y)) ;; => #<unspecified>

  (dethm cons/car+cdr (x)
         (if (atom x) 't (equal (cons (car x) (cdr x)) x))) ;; => #<unspecified>


  ;; The Axioms of If (final)
  (dethm if-true (x y)
         (equal (if 't x y) x)) ;; => #<unspecified>

  (dethm if-false (x y)
         (equal (if 'nil x y) y)) ;; => #<unspecified>

  (dethm if-same (x y)
         (equal (if x y y) y)) ;; => #<unspecified>

  (dethm if-nest-A (x y z)
         (if x (equal (if x y z) y) 't)) ;; => #<unspecified>

  (dethm if-nest-E (x y z)
         (if x 't (equal (if x y z) z))) ;; => #<unspecified>

  ;;;;;;;;;;;;;;
  ;; Examples ;;
  (defun chapter2.example1 ()
    (J-Bob/step (prelude)
                '(if (car (cons a b)) c c)
                '(((Q) (car/cons a b))
                  (() (if-same a c))
                  (() (if-same
                       (if (equal a 't)
                           (if (equal 'nil 'nil) a b)
                           (equal 'or (cons 'black '(coffee))))
                       c))
                  ((Q E 2) (cons 'black '(coffee)))
                  ((Q A Q) (equal-same 'nil))
                  ((Q A) (if-true a b))
                  ((Q A) (equal-if a 't))))) ;; => #<unspecified>
  (chapter2.example1) ;; => (if (if (equal a (quote t)) (quote t) (equal (quote or) (quote (black coffee)))) c c)

  (defun chapter2.example2 ()
    (J-Bob/step (prelude)
                '(if (atom (car a))
                     (if (equal (car a) (cdr a)) 'hominy 'grits)
                     (if (equal (cdr (car a)) '(hash browns))
                         (cons 'ketchup (car a))
                         (cons 'mustard (car a))))
                '(((E A 2) (cons/car+cdr (car a)))
                  ((E A 2 2) (equal-if (cdr (car a)) '(hash browns)))))) ;; => #<unspecified>
  (chapter2.example2) ;; => (if (atom (car a)) (if (equal (car a) (cdr a)) (quote hominy) (quote grits)) (if (equal (cdr (car a)) (quote (hash browns))) (cons (quote ketchup) (cons (car (car a)) (quote (hash browns)))) (cons (quote mustard) (car a))))

  (defun chapter2.example3 ()
    (J-Bob/step (prelude)
                '(cons 'statement
                       (cons (if (equal a 'question) (cons n '(answer)) (cons n '(else)))
                             (if (equal a 'question) (cons n '(other answer)) (cons n '(other else)))))
                '(((2) (if-same (equal a 'question)
                                (cons (if (equal a 'question) (cons n '(answer)) (cons n '(else)))
                                      (if (equal a 'question) (cons n '(other answer)) (cons n '(other else))))))
                  ((2 A 1) (if-nest-A (equal a 'question) (cons n '(answer)) (cons n '(else))))
                  ((2 E 1) (if-nest-E (equal a 'question) (cons n '(answer)) (cons n '(else))))
                  ((2 A 2) (if-nest-A (equal a 'question) (cons n '(other answer)) (cons n '(other else))))
                  ((2 E 2) (if-nest-E (equal a 'question) (cons n '(other answer)) (cons n '(other else))))))) ;; => #<unspecified>
  (chapter2.example3) ;; => (cons (quote statement) (if (equal a (quote question)) (cons (cons n (quote (answer))) (cons n (quote (other answer)))) (cons (cons n (quote (else))) (cons n (quote (other else))))))
#+END_SRC
