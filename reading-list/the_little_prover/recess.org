[[../index.org][Reading List]]
[[../the_little_prover.org][The Little Prover]]

* Recess
#+BEGIN_SRC scheme
  (load "j-bob-lang.scm") ;; => #<unspecified>
  (load "j-bob.scm") ;; => #<unspecified>

  (J-Bob/step (prelude)
              '(car (cons 'ham '(cheese)))
              '())

  (J-Bob/step (prelude)
              '(car (cons 'ham '(cheese)))
              '((() (car/cons 'ham '(cheese))))) ;; => (quote ham)

  (J-Bob/step (prelude)
              '(equal 'flapjack (atom (cons a b)))
              '(((2) (atom/cons a b))
                (() (equal 'flapjack 'nil)))) ;; => (quote nil)

  (J-Bob/step (prelude)
              '(atom (cdr (cons (car (cons p q)) '())))
              '(((1 1 1) (car/cons p q))
                ((1) (cdr/cons p '()))
                (() (atom '())))) ;; => (quote t)

  (J-Bob/step (prelude)
              '(if a c c)
              '()) ;; => (if a c c)

  (J-Bob/step (prelude)
              '(if a c c)
              '((() (if-same a c)))) ;; => c

  (J-Bob/step (prelude)
              '(if a c c)
              '((() (if-same a c))
                (() (if-same
                     (if (equal a 't)
                         (if (equal 'nil 'nil) a b)
                         (equal 'or (cons 'black '(coffee))))
                     c)))) ;; => (if (if (equal a (quote t)) (if (equal (quote nil) (quote nil)) a b) (equal (quote or) (cons (quote black) (quote (coffee))))) c c)

  (J-Bob/step (prelude)
              '(if a c c)
              '((() (if-same a c))
                (() (if-same
                     (if (equal a 't)
                         (if (equal 'nil 'nil) a b)
                         (equal 'or (cons 'black '(coffee))))
                     c))
                ((Q E 2) (cons 'black '(coffee))))) ;; => (if (if (equal a (quote t)) (if (equal (quote nil) (quote nil)) a b) (equal (quote or) (quote (black coffee)))) c c)

  (J-Bob/prove (prelude)
               '(((defun pair (x y)
                    (cons x (cons y '())))
                  nil))) ;; => (quote t)

  (J-Bob/prove (prelude)
               '(((defun pair (x y)
                    (cons x (cons y '())))
                  nil)
                 ((defun first-of (x)
                    (car x))
                  nil)
                 ((defun second-of (x)
                    (car (cdr x)))
                  nil))) ;; => (quote t)

  (J-Bob/prove (prelude)
               '(((defun pair (x y)
                    (cons x (cons y '())))
                  nil)
                 ((defun first-of (x)
                    (car x))
                  nil)
                 ((defun second-of (x)
                    (car (cdr x)))
                  nil)
                 ((dethm first-of-pair (a b)
                         (equal (first-of (pair a b)) a))
                  nil))) ;; => (equal (first-of (pair a b)) a)

  (J-Bob/prove (prelude)
               '(((defun pair (x y)
                    (cons x (cons y '())))
                  nil)
                 ((defun first-of (x)
                    (car x))
                  nil)
                 ((defun second-of (x)
                    (car (cdr x)))
                  nil)
                 ((dethm first-of-pair (a b)
                         (equal (first-of (pair a b)) a))
                  nil
                  ((1 1) (pair a b))))) ;; => (equal (first-of (cons a (cons b (quote ())))) a)

  (J-Bob/prove (prelude)
               '(((defun pair (x y)
                    (cons x (cons y '())))
                  nil)
                 ((defun first-of (x)
                    (car x))
                  nil)
                 ((defun second-of (x)
                    (car (cdr x)))
                  nil)
                 ((dethm first-of-pair (a b)
                         (equal (first-of (pair a b)) a))
                  nil
                  ((1 1) (pair a b))
                  ((1) (first-of (cons a (cons b '()))))
                  ((1) (car/cons a (cons b '())))
                  (() (equal-same a))))) ;; => (quote t)

  (defun prelude+first-of-pair ()
    (J-Bob/define (prelude)
                  '(((defun pair (x y)
                       (cons x (cons y '())))
                     nil)
                    ((defun first-of (x)
                       (car x))
                     nil)
                    ((defun second-of (x)
                       (car (cdr x)))
                     nil)
                    ((dethm first-of-pair (a b)
                            (equal (first-of (pair a b)) a))
                     nil
                     ((1 1) (pair a b))
                     ((1) (first-of (cons a (cons b '()))))
                     ((1) (car/cons a (cons b '())))
                     (() (equal-same a)))))) ;; => #<unspecified>

  (J-Bob/prove (prelude)
               '(((dethm second-of-pair (a b)
                         (equal (second-of (pair a b)) b))
                  nil))) ;; => (quote nil)

  (J-Bob/prove (prelude+first-of-pair)
               '(((dethm second-of-pair (a b)
                         (equal (second-of (pair a b)) b))
                  nil)))

  ;; Stopped on Page 176
#+END_SRC
