+ [[../index.org][Main Index]]
+ [[./index.org][Reading List]] 

* [[http://learnyouahaskell.com/chapters][Learn You A Haskell For Great Good]] [57%]
1. [X] Introduction
   + [X] About this tutorial
   + [X] So what's Haskell?
   + [X] What you need to dive in
2. [X] [[./learn_you_a_haskell/starting_out.hs][Starting Out]]
   + [X] Ready, set, go!
   + [X] Baby's first functions
   + [X] An intro to lists
   + [X] Texas ranges
   + [X] I'm a list comprehension
   + [X] Tuples
3. [X] [[./learn_you_a_haskell/types_and_typeclasses.hs][Types and Typeclasses]]
   + [X] Believe the type
   + [X] Type variables
   + [X] Typeclasses 1
4. [X] [[./learn_you_a_haskell/syntax_in_functions.hs][Syntax in Functions]]
   + [X] Pattern matching
   + [X] Guards, guards!
   + [X] Where!?
   + [X] Let it be
   + [X] Case expressions
5. [X] [[./learn_you_a_haskell/recursion.hs][Recursion]]
   + [X] Hello recursion!
   + [X] Maximum awesome
   + [X] A few more recursive functions
   + [X] Quick, sort!
   + [X] Thinking recursively
6. [X] [[./learn_you_a_haskell/higher_order_functions.hs][Higher Order Functions]]
   + [X] Curried functions
   + [X] Some higher-orderism is in order
   + [X] Maps and filters
   + [X] Lambdas
   + [X] Only folds and horses
   + [X] Function application with $
   + [X] Function composition
7. [X] [[./learn_you_a_haskell/modules.hs][Modules]]
   + [X] Loading modules
   + [X] Data.List
   + [X] Data.Char
   + [X] Data.Map
   + [X] Data.Set
   + [X] Making our own modules
     [[./learn_you_a_haskell/Geometry.hs][Geometry]]
8. [X] [[./learn_you_a_haskell/own_types.hs][Making Our Own Types and Typeclasses]]
   + [X] Algebraic data types intro
   + [X] Record syntax
   + [X] Type parameters
   + [X] Derived instances
   + [X] Type synonyms
   + [X] Recursive data structures
   + [X] Typeclasses 102
   + [X] A yes-no typeclass
   + [X] The Functor typeclass
   + [X] Kinds and some type-foo
9. [ ] Input and Output
   + [ ] Hello, world!
   + [ ] Files and streams
   + [ ] Command line arguments
   + [ ] Randomness
   + [ ] Bytestrings
   + [ ] Exceptions
10. [ ] Functionally Solving Problems
    + [ ] Reverse Polish notation calculator
    + [ ] Heathrow to London
11. [ ] Functors, Applicative Functors and Monoids
    + [ ] Functors redux
    + [ ] Applicative functors
    + [ ] The newtype keyword
    + [ ] Monoids
12. [ ] A Fistful of Monads
    + [ ] Getting our feet wet with Maybe
    + [ ] The Monad type class
    + [ ] Walk the line
    + [ ] do notation
    + [ ] The list monad
    + [ ] Monad laws
13. [ ] For a Few Monads More
    + [ ] Writer? I hardly know her!
    + [ ] Reader? Ugh, not this joke again.
    + [ ] Tasteful stateful computations
    + [ ] Error error on the wall
    + [ ] Some useful monadic functions
    + [ ] Making monads
14. [ ] Zippers
    + [ ] Taking a walk
    + [ ] A trail of breadcrumbs
    + [ ] Focusing on lists
    + [ ] A very simple file system
    + [ ] Watch your step
