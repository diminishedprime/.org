+ [[../index.org][Main Index]]
+ [[./index.org][Problems]]

* Odd period square roots
*** Problem 64
All square roots are periodic when written as continued fractions and can be
written

It can be seen that the sequence is repeating. For conciseness, we use the
notation √23 = [4;(1,3,1,8)], to indicate that the block (1,3,1,8) repeats
indefinitely.

The first ten continued fraction representations of (irrational) square roots
are:

√2=[1;(2)], period=1
√3=[1;(1,2)], period=2
√5=[2;(4)], period=1
√6=[2;(2,4)], period=2
√7=[2;(1,1,1,4)], period=4
√8=[2;(1,4)], period=2
√10=[3;(6)], period=1
√11=[3;(3,6)], period=2
√12= [3;(2,6)], period=2
√13=[3;(1,1,1,1,6)], period=5

Exactly four continued fractions, for N ≤ 13, have an odd period.

How many continued fractions for N ≤ 10000 have an odd period?

#+BEGIN_SRC clojure
  (defn floored-square-root [n]
    (int (Math/sqrt n)))

  (defn square [n] (* n n))

  (defn magic [S]
    (let [memoized (atom {:m {0 0}
                          :d {0 1}
                          :a {0 (floored-square-root S)}})]
      (letfn [(m [n]
                (cond
                  (get (:m @memoized) n) (get (:m @memoized) n)
                  :else (let [answer (- (* (d (dec n)) (a (dec n)))
                                        (m (dec n)))]
                          (swap! memoized (fn [old]
                                            (assoc old
                                                   :m (assoc (:m old)
                                                             n answer))))
                          answer)))
              (d [n]
                (cond
                  (get (:d @memoized) n) (get (:d @memoized) n)
                  :else (let [answer (/ (- S (square (m n)))
                                        (d (dec n)))]
                          (swap! memoized (fn [old]
                                            (assoc old
                                                   :d (assoc (:d old)
                                                             n answer))))
                          answer)))
              (a [n]
                (cond
                  (get (:a @memoized) n) (get (:a @memoized) n)
                  :else (let [answer (int (/ (+ (a 0) (m n))
                                             (d n)))]
                          (swap! memoized (fn [old]
                                            (assoc old
                                                   :a (assoc (:a old)
                                                             n answer))))
                          answer)))]
        (let [max (* 3 (a 0))]
          (map a (range (inc max)))))))

  (defn find-period [my-seq]
    (let [options (rest my-seq)
          last-num (last (distinct options))]
      (let [repeat (concat (take-while (partial not= last-num) options)
                           [last-num])]
        #_(println (str "Original: " (vec (partition (count repeat)
                                                     (count repeat)
                                                     nil
                                                     options)) "\n"
                        "Period  : " (vec repeat)
                        "\n \n"))
        repeat)))

  (find-period (magic 23))

  (defn is-square? [n]
    (let [result (Math/sqrt n)]
      (== (int result) result)))

  (->> (rest (range (inc 10000)))
       (filter (complement is-square?))
       (map magic)
       (map find-period)
       (map count)
       (filter odd?)
       count) ;; => 1322
#+END_SRC
