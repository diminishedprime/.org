[[../index.org][Home]]
[[./index.org][Algorithms]]

* Binary Search
** Haskell
#+BEGIN_SRC haskell
  isSingleElement index = index == 0

  middle list = quot (length list) 2

  handleSingle a = case a of
    EQ -> Just 0
    _ -> Nothing

  binarySearch element sortedList =
    let middleIndex = middle sortedList
        middleElement = sortedList !! middleIndex
        comparison = compare element middleElement
    in if isSingleElement middleIndex
       then handleSingle comparison
       else case comparison of
              LT -> binarySearch element $ take middleIndex sortedList
              EQ -> Just middleIndex
              GT -> let newLeft = middleIndex + 1
                        rightIndex = binarySearch element $ drop middleIndex sortedList
                    in fmap (+newLeft) rightIndex
#+END_SRC
** Clojure
#+BEGIN_SRC clojure
  (ns binary-search)

  (defn- middle [my-vec]
    (quot (count my-vec) 2))

  (defn- handle-single
    [comparison]
    (when (zero? comparison) 0))

  (defn single-element?
    [middle-index]
    (zero? middle-index))

  (defn- binary-search-helper
    [element sorted-vec]
    (let [middle-index (middle sorted-vec)
          middle-element (nth sorted-vec middle-index)
          comparison (compare element middle-element)]
      (if (single-element? middle-index)
        (handle-single comparison)
        (cond
          (< comparison 0) (recur element (subvec sorted-vec 0 middle-index))
          (= comparison 0) middle-index
          (> comparison 0) (let [new-left (inc middle-index)
                                 right-index (binary-search-helper
                                              element
                                              (subvec sorted-vec new-left))]
                             (when right-index (+ new-left right-index)))))))

  (defn binary-search
    "Assumes that the vector passed in is already sorted."
    [element my-vector]
    (binary-search-helper element my-vector))

  ;; Some examples
  (binary-search 3 [1 2 3 4 5])
  (binary-search 1 [1])
  (binary-search 1 [2])
  (binary-search 4 [1 2 3])
#+END_SRC
** Javascript
#+BEGIN_SRC javascript
  /*jshint esversion: 6 */

  var log = function(stuff_to_log) {
      let stuff = (stuff_to_log === undefined ||
                   stuff_to_log === null) ?
          "You goofed" : stuff_to_log.toString(),
          html_stuff = "<h1>" + stuff + "</h1>";
      document.getElementsByTagName('body')[0].innerHTML = html_stuff;
      return html_stuff;
  };

  var middle = function(my_array) {
      let length = my_array.length,
          middle = Math.floor(length / 2);
      return middle;
  };

  var handle_single = function(comparison) {
      return (comparison === 0) ? 0 : null;
  };

  var is_single_element = function(middle_index) {
      return middle_index === 0;
  };

  var compare = function(element_1, element_2) {
      return (element_1 < element_2) ? -1 :
          (element_1 > element_2) ? 1 :
          0;
  };

  var binary_search_helper = function(element, sorted_array) {
      let middle_index = middle(sorted_array),
          middle_element = sorted_array[middle_index],
          comparison = compare(element, middle_element);
      return (is_single_element(middle_index)) ?
          handle_single(comparison) :
          function() {
              if (comparison < 0) {
                  return binary_search_helper(element,
                                              sorted_array.slice(0, middle_index));
              } else if (comparison === 0) {
                  return middle_index;
              } else {
                  let new_left = middle_index + 1,
                      right_index = binary_search_helper(element,
                                                         sorted_array.slice(new_left));
                  return (right_index || right_index === 0) ? new_left + right_index :
                      null;
              }
          }();
  };

  log(binary_search_helper(2, [1, 2, 3, 4]));
  log(binary_search_helper(3, [1, 2, 3]));
  log(binary_search_helper(3, [1, 1, 1, 6, 7]));
  // I did something weird here, but I'm not sure exactly what.
  log(binary_search_helper(3, [1, 2, 4, 5]));
#+END_SRC
