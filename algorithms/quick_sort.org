[[../index.org][Home]]
[[./index.org][Algorithms]]

* Quick Sort
** Haskell
#+BEGIN_SRC haskell
  quickSort [] = []
  quickSort [x] = [x]
  quickSort (first:rest) = let smallerThanFirst = [a | a <- rest, a <= first]
                               biggerThanFirst = [a | a <- rest, a > first]
                           in  quickSort smallerThanFirst
                               ++ [first] ++
                               quickSort biggerThanFirst
#+END_SRC
** Clojure
#+BEGIN_SRC clojure
  (defn quick-sort [x]
    (if (<= (count x) 1)
      x
      (let [[x & xs] x
            right (filter (partial <= x) xs)
            left (filter (partial > x) xs)]
        (concat (quick-sort left)
                [x]
                (quick-sort right)))))

  (defn quick-sort [[x & xs]]
    (if-not (seq xs)
      x
      (concat (quick-sort (filter (partial > x) xs))
              [x]
              (quick-sort (filter (partial <= x) xs)))))

  (quick-sort [1 2 1 0])

  (defmacro x [cmp a as]
    `(filter (partial ~cmp ~a) ~as))

  (defmacro y [fn-name cmp a as]
    `(concat (~fn-name (x ~cmp ~a ~as))
             [~a]
             (~fn-name (x (complement ~cmp) ~a ~as))))

  (defn poop [[a & as]]
    (if (or a (seq as))
      (y poop > a as)
      a))

  (poop [3 2 1 0])
#+END_SRC
