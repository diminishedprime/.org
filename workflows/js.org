[[../index.org][Main Index]]
[[./index.org][Workflow Index]]

* Express Server
  1) Create project in git
  2) npm-init in folder
  3) install dev dependencies
     #+BEGIN_SRC sh
       npm install --save-dev \
           eslint \
           tape \
           blue-tape \
           popsicle \
           standard
     #+END_SRC
  4) install dependencies
     #+BEGIN_SRC sh
       npm install --save \
           express \
           convict \
           body-parser \
           bluebird
     #+END_SRC
  5) set up config for ports/etc in lib/settings.js using convict
     #+BEGIN_SRC javascript
       var convict = require("convict")

       var web = convict({
         port: {
           doc: "The port on which to run the web server.",
           default: 3200
         }
       })

       module.exports = {
         web : web.getProperties()
       }
     #+END_SRC
  6) set up routes in a lib/define-all-routes.js
     #+BEGIN_SRC javascript
       var Promise = require("bluebird")

       var createHello = (request) => Promise.resolve("hello, world")

       module.exports = function(app) {
         addRoute(app, "post", "/hello", createHello)
       }

       var handleResult = function(response) {
         return (result) => response.send(result)
       }

       var handleError = function(response) {
         return (err) => response
           .status(err.status || 500)
           .send(err.message || "We're sorry. Something went wrong.")
       }

       var addRoute = function(app, verb, path, handler){
         app[verb](path, function(request, response){
           handler(request)
             .then(handleResult(response))
             .catch(handleError(response))
         })
       }
     #+END_SRC
  7) set up a server start/stop in lib/start-server.js
     #+BEGIN_SRC javascript
       var Promise = require("bluebird")
       var bodyParser = require("body-parser")
       var defineAllRoutes = require("./define-all-routes.js")
       var express = require("express")
       var {web} = require("./settings.js")

       var handler = function(app) {
         return function(resolve, reject) {
           var server = app.listen(web.port, function(err) {
             if (err) {
               reject(err)
             } else {
               resolve(server)
             }
           })
         }
       }

       module.exports = function() {
         var app = express()

         app.use(bodyParser.json())
         app.use(bodyParser.urlencoded({extended: true}))

         defineAllRoutes(app)

         return new Promise(handler(app))
       }
     #+END_SRC
  8) lib/app.js for the entrypoint
     #+BEGIN_SRC javascript
       var startServer = require("./start-server.js")

       startServer().then(function (server) {
         console.log(`hello-api REST api listening on port ${server.address().port}`)
       })
     #+END_SRC
  9) test under test-int/routes/post-hello-test.js
     #+BEGIN_SRC javascript
       var test = require("blue-tape")
       var popsicle = require("popsicle")
       var {web} = require("../../lib/settings.js")
       var startServer = require("../../lib/start-server.js")

       test("POST /hello", (tape) => {
         return startServer().then((server) => {
           var newHello = {}

           var postHello = () => popsicle.request({
             method: "post",
             url: `http://localhost:${web.port}/hello`,
             body: newHello
           })

           var assertResponse = (response) => {
             server.close()
             var actual = response.body
             var expected = "hello, world"
             tape.deepEquals(actual, expected)
           }

           return postHello()
             .then(assertResponse)
         })
       })
     #+END_SRC
  10) set up a script to run the tests under package.json
      #+BEGIN_SRC javascript
        "scripts": {
          "lint": "eslint . --ignore-path .gitignore && echo ESLINT OK",
          "int-test": "tape test-int/**/*-test.js"
        }
      #+END_SRC
  11) set up .eslintrc.js
      #+BEGIN_SRC javascript
        module.exports = {
          extends: "standard",
          rules: {
            "eqeqeq": "off",
            "no-else-return": "off",
            "no-plusplus": "off",
            "no-use-before-define": "off",
            "no-console": "off"
          }
        }
      #+END_SRC
* Add Postgres to Express App
  1) add necessary deps db-migrate
     #+BEGIN_SRC sh
       npm install --save-dev db-migrate db-migrate-pg
     #+END_SRC
  2) add pg
     #+BEGIN_SRC sh
       npm install --save pg
     #+END_SRC
  3) add scripts to package.json
     #+BEGIN_SRC javascript
       {
         "pg-create-db": "createdb --username=hello_api --owner=hello_api hello_api",
         "pg-cluster-init": "initdb /usr/local/var/postgres/db/default",
         "pg-create-user": "createuser hello_api --createdb;",
         "pg-init": "npm run pg-stop || true; npm run pg-start; npm run pg-create-user; npm run pg-create-db; db-migrate up",
         "pg-migrate": "db-migrate down && db-migrate up",
         "pg-reset": "npm run pg-stop; npm run pg-start; dropdb --if-exists --echo hello_api; dropuser --if-exists hello_api",
         "pg-start": "pg_ctl start -w",
         "pg-stop": "pg_ctl stop"
       }
     #+END_SRC
  4) Create a database config file for db-migrate
     #+BEGIN_SRC javascript
       {
         "dev": {
           "driver": "pg",
           "host": "localhost",
           "database": "hello_api",
           "user": "hello_api"
         }
       }

     #+END_SRC
  5) create a template for the migration
     #+BEGIN_SRC sh
       node node_modules/db-migrate/bin/db-migrate create create-hello-table
     #+END_SRC
  6) add in functionality for exports.up and exports.down
     #+BEGIN_SRC javascript
       var dbm;
       var type;
       var seed;

       /**
        ,* We receive the dbmigrate dependency from dbmigrate initially.
        ,* This enables us to not have to rely on NODE_PATH.
        ,*/
       let tableName = 'hello'

       exports.setup = function(options, seedLink) {
         dbm = options.dbmigrate;
         type = dbm.dataType;
         seed = seedLink;
       }

       exports.up = function(db) {
         let config = {
           id: {
             type: "string",
             primaryKey: true
           },
           data: "jsonb"
         }
         return db.createTable(tableName, config)
       }

       exports.down = function(db) {
         return db.dropTable(tableName)
       }

       exports._meta = {
         "version": 1
       }
     #+END_SRC
  7) run the pg-init script that we put into package.json earlier
     #+BEGIN_SRC sh
       npm run pg-init
     #+END_SRC
  8) add the following code
     + lib/start-server.js This is where we make sure to call pool.shutDown()
       #+BEGIN_SRC javascript
         let Promise = require("bluebird")
         let bodyParser = require("body-parser")
         let defineAllRoutes = require("./define-all-routes.js")
         let express = require("express")
         let {web} = require("./settings.js")
         let pool = require("./db/pool.js")

         let addCleanup = function(server) {
           let _oldClose = server.close
           server.close = function() {
             pool.shutDown()
             _oldClose.apply(this)
           }
         }

         let handler = function(app) {
           return function(resolve, reject) {
             let server = app.listen(web.port, function(err) {
               if (err) {
                 reject(err)
               } else {
                 addCleanup(server)
                 resolve(server)
               }
             })
           }
         }

         module.exports = function() {
           let app = express()

           app.use(bodyParser.json())
           app.use(bodyParser.urlencoded({extended: true}))

           defineAllRoutes(app)

           return new Promise(handler(app))
         }

       #+END_SRC
     + lib/settings.js
       #+BEGIN_SRC javascript
         let convict = require("convict")

         let web = convict({
           port: {
             doc: "The port on which to run the web server.",
             default: 3200
           }
         })

         let pg = convict({
           user: {
             doc: "The database system user.",
             default: "hello_api"
           },
           database: {
             doc: "The name of the hello-api database.",
             default: "hello_api"
           },
           max: {
             doc: "The maximum number of connections in the pg pool.",
             default: 10
           },
           host: {
             doc: "Postgres host pulled from environment letiable.",
             default: "localhost",
             env: "HELLO_API_DATA_PG_HOST"
           },
           port: {
             doc: "Postgres host pulled from environment letiable.",
             default: "5432",
             env: "HELLO_API_DATA_PG_PORT"
           }
         })

         module.exports = {
           web : web.getProperties(),
           pg : pg.getProperties()
         }

       #+END_SRC
     + lib/db/stringify-for-sql.js
       #+BEGIN_SRC javascript
         module.exports = (value) => `$$${JSON.stringify(value)}$$`
       #+END_SRC
     + lib/db/get-connection.js
       #+BEGIN_SRC javascript
         let Bluebird = require("bluebird"),
             getPool = require("./pool.js").getPool

         // Get a promise for a connection from the connection pool
         // When done with your client, call `client.returnToPool()` to give it back
         module.exports = function(){
           return new Bluebird(function(resolve, reject){
             getPool().connect(function(err, client, done){
               if (err){
                 return reject(err)
               }
               let pclient = Bluebird.promisifyAll(client)
               pclient.returnToPool = done
               return resolve(pclient)
             })
           })
         }

       #+END_SRC
     + lib/db/pool.js
       #+BEGIN_SRC javascript
         let pg = require("pg"),
             settings = require("../settings.js")

         let _pool

         let getPool = function(){
           if (!_pool) {
             _pool = new pg.Pool(settings.pg)
           }
           return _pool
         }

         let shutDown = function(){
           if (_pool) {
             let pool = _pool
             _pool = null
             console.log("ending pool")
             pool.end()
           }
         }

         module.exports = {
           getPool,
           shutDown
         }
       #+END_SRC
     + lib/db/run-query
       #+begin_src javascript
         let getConnection = require("./get-connection.js")

         module.exports = function(query){
           return getConnection().then(function(client){
             return client.query(query).then(function(result){
               client.returnToPool()
               return result
             })
           })
         }

       #+end_src
     + lib/db/get-hello.js
       #+BEGIN_SRC javascript
         let runQuery = require("./run-query.js"),
             Promise = require("bluebird")

         let dbQuery = function (id) {
           let query = `SELECT data, id
                        FROM hello
                        WHERE id = $$${id}$$;`
           return runQuery(query)
         }

         let parseData = (queryResponse) => Promise.resolve(queryResponse.rows[0].data)

         module.exports = (id) => dbQuery(id).then(parseData)

       #+END_SRC
     + lib/db/insert-hello.js
       #+begin_src javascript
         let runQuery = require("./run-query.js"),
             stringifyForSQL = require("./stringify-for-sql.js")

         module.exports = function(hello) {
           let helloString = stringifyForSQL(hello),
               id = hello.id,
               query = `INSERT INTO hello (id, data)
                        VALUES ('${id}', ${helloString})`
           return runQuery(query)
         }
       #+END_SRC
     + test-int/db/insert-hello-test.js
       #+BEGIN_SRC javascript
         let test = require("blue-tape"),
             getHello = require("../../lib/db/get-hello.js"),
             insertHello = require("../../lib/db/insert-hello.js")

         test("insertHelloTest", function(t){
           let expected = {
             data : {
               json: "data"
             }
           }

           let insertAndReturnId = () => insertHello(expected),
               getById = (id) => getHello(id),
               assert = (actual) => t.deepEquals(actual, expected)

           return insertAndReturnId()
             .then(getById)
             .then(assert)
         })

       #+END_SRC
* React App
  1. =create-react-app project-name=
  2. =npm install -S ramda redux react-redux react-router-dom redux-promise-middleware=
  3. =npm install -D eslint eslint-plugin-react tape babel-tape-runner=
  4. =.eslintrc.js=
     #+BEGIN_SRC js
       module.exports = {
         "env": {
           "browser": true,
           "es6": true
         },
         "extends": [
           "eslint:recommended",
           "plugin:react/recommended"
         ],
         "parserOptions": {
           "ecmaFeatures": {
             "experimentalObjectRestSpread": true,
             "jsx": true
           },
           "sourceType": "module"
         },
         "plugins": [
           "react"
         ],
         "rules": {
           "indent": [
             "error", 2, {
               "VariableDeclarator": {
                 "var": 2,
                 "let": 2,
                 "const": 3
               }
             }
           ],
           "no-var": ["error"],
           "prefer-const" : ["error"],
           "linebreak-style": [
             "error",
             "unix"
           ],
           "quotes": [
             "error",
             "single"
           ],
           "semi": [
             "error",
             "never"
           ]
         }
       };
     #+END_SRC
