+ [[../index.org][Main Index]]
+ [[./index.org][Problems]]

* Reciprocal cycles
*** Problem 26
A unit fraction contains 1 in the numerator. The decimal representation of the
unit fractions with denominators 2 to 10 are given:

1/2	=   0.5
1/3	=   0.(3)
1/4	=   0.25
1/5	=   0.2
1/6	=   0.1(6)
1/7	=   0.(142857)
1/8	=   0.125
1/9	=   0.(1)
1/10	=   0.1

Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be
seen that 1/7 has a 6-digit recurring cycle.

Find the value of d < 1000 for which 1/d contains the longest recurring cycle in
its decimal fraction part.

*** Clojure
#+BEGIN_SRC clojure
  (defn gen-primes "Generates an infinite, lazy sequence of prime numbers"
    []
    (let [reinsert (fn [table x prime]
                     (update-in table [(+ prime x)] conj prime))]
      (defn primes-step [table d]
        (if-let [factors (get table d)]
          (recur (reduce #(reinsert %1 d %2) (dissoc table d) factors)
                 (inc d))
          (lazy-seq (cons d (primes-step (assoc table (* d d) (list d))
                                         (inc d))))))
      (primes-step {} 2)))

  ;; Fermat's Little Theorem ftw!
  (defn cycle-length
    [n]
    (cond
      (even? n) 0
      (zero? (mod n 5)) 0
      :else (some (fn [current-int]
                    (when (= 0 (mod (dec (.pow (BigInteger. "10") current-int))
                                    (biginteger n)))
                      current-int)) (rest (range)))))
  (defn max-cycle
    [cycle-pair-a cycle-pair-b]
    (let [[a len-a] cycle-pair-a
          [b len-b] cycle-pair-b]
      (if (> len-a len-b)
        cycle-pair-a cycle-pair-b)))

  (->> (gen-primes)
       (take-while #(< % 1000))
       (map (fn [n]
              [n (cycle-length n)]))
       (reduce max-cycle)) ;; => [983 982]


#+END_SRC
